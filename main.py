from keybords import start_key,narh_key,son_key,damas
from Token1 import TOKEN
from aiogram import Bot, Dispatcher,executor,types
import logging
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def get_start(message: types.Message):
    await message.answer("UzAuto –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑, –∫–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥üëá", reply_markup=start_key)


@dp.callback_query_handler(text = "Narh")
async def get_narh(call: types.CallbackQuery):
    await call.message.answer(text= "–ü–∞—Å—Ç–¥–∞–≥–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω –º–∞—à–∏–Ω–∞–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ ‚¨áÔ∏è" ,reply_markup=narh_key)
    await call.message.delete()

@dp.callback_query_handler(text = "boshmeniyu")
async def get_narh(call: types.CallbackQuery):
    await call.message.answer(text= "UzAuto –±–æ—Ç–≥–∞ —Ö—É—à –∫–µ–ª–∏–±—Å–∏–∑, –∫–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥üëá" ,reply_markup=start_key)
    await call.message.delete()

@dp.callback_query_handler(text = "sotuv")
async def get_narh(call: types.CallbackQuery):
    await call.message.answer(text= "–ü–∞—Å—Ç–¥–∞–≥–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω –º–∞—à–∏–Ω–∞–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ ‚¨áÔ∏è" ,reply_markup=son_key)
    await call.message.delete()

@dp.callback_query_handler(text = "son")
async def get_narh(call: types.CallbackQuery):
    await call.message.answer(text= "–ü–∞—Å—Ç–¥–∞–≥–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω –º–∞—à–∏–Ω–∞–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥ ‚¨áÔ∏è" ,reply_markup=narh_key)
    await call.message.delete()

s3 = """–ö–æ–º–ø–ª–µ–∫—Ç–∞—Å–∏—è–Ω–∏ —Ä—û–π—Ö–∞—Ç–¥–∞–Ω —Ç–∞–Ω–ª–∞–Ω–≥ 

1. D2 STYLE   (86,971,000 —Å—û–º)
2. D3 PLUS  (86,031,000 —Å—û–º)
3. D3 STYLE (86,397,000 —Å—û–º)
4. LB2 PLUS  (87,446,000 —Å—û–º)
5. LB3 PLUS (84,910,000 —Å—û–º)
6. LB3 STYLE  (85,124,000 —Å—û–º)
7. D11 PLUS (–ì–†–£–ó–û–í–û–ô) (83,904,000 —Å—û–º)
8. D11 STYLE  (–ì–†–£–ó–û–í–û–ô) (84,309,000 —Å—û–º)
9. D2 PLUS (86,605,000 —Å—û–º)
10. LB2 STYLE (87,660,000 —Å—û–º)"""

@dp.callback_query_handler(text = "damaslar")
async def get_narh(call: types.CallbackQuery):
    await call.message.answer(text = s3 ,reply_markup=damas)
    await call.message.delete()

if __name__ == "__main__": 
    executor.start_polling(dp,skip_updates=True) 